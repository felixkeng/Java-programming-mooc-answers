import java.util.ArrayList;

public class BoxWithMaxWeight extends Box {
    private int max;
    private ArrayList<Item> items;
    public BoxWithMaxWeight(int i){
        this.items = new ArrayList<>();
        max = i;
    }
    
    
    
    @Override
    public void add(Item item){
        int total = 0;
        for (Item i : items){
            total += i.getWeight();
        }
        if (item.getWeight() <= max - total){
            this.items.add(item);
            total += item.getWeight();
        }
    }
    
    @Override
    public boolean isInBox(Item i){
        return this.items.contains(i);
    }
    
}











import java.util.ArrayList;
public class OneItemBox extends Box{
    private int i;
    private ArrayList<Item> items;
    public OneItemBox(){
        i = 0;
        this.items = new ArrayList<>();
    }
    
    
    
    @Override
    public void add(Item item){
        if (i == 0){
            this.items.add(item);
            i++;
        }
    }
    @Override
    public boolean isInBox(Item i){
        return this.items.contains(i);
    }
}



















import java.util.ArrayList;
public class MisplacingBox extends Box{
    private ArrayList<Item> items;
    public MisplacingBox(){
        this.items = new ArrayList<>();
    }
    
    @Override
    public void add(Item item){
        this.items.add(item);
    }
    @Override
    public boolean isInBox(Item i){
        return false;
    }
}
